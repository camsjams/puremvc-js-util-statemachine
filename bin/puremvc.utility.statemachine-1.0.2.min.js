/**
 * @author Cameron Manavian
 *
 * PureMVC JS Utility - StateMachine
 * Copyright (c) 2014 Cameron Manavian
 * ====================================
 * Based on
 * PureMVC AS3 Utility - StateMachine
 * Copyright (c) 2008 Neil Manuell, Cliff Hall
 * Your reuse is governed by the Creative Commons Attribution 3.0 License
 */
puremvc.define({name:"utilities.statemachine.State",parent:puremvc.Notifier,constructor:function(t,e,i,n){this.name=t,this.onInit(),e&&(this.entering=e),i&&(this.exiting=i),n&&(this.changed=n)}},{name:null,entering:null,exiting:null,changed:null,transitions:{},defineTrans:function(t,e){this.getTarget(t)||(this.transitions[t]=e)},removeTrans:function(t){this.transitions[t]=null},getTarget:function(t){return this.transitions[t]},onInit:function(){this.entering=null,this.exiting=null,this.changed=null,this.transitions={}}}),puremvc.define({name:"utilities.statemachine.StateMachine",parent:puremvc.Mediator},{states:{},initial:null,canceled:!1,onRegister:function(){this.initial&&this.transitionTo(this.initial,null)},listNotificationInterests:function(){return[utilities.statemachine.StateMachine.ACTION,utilities.statemachine.StateMachine.CANCEL]},handleNotification:function(t){switch(t.getName()){case utilities.statemachine.StateMachine.ACTION:var e=t.getType(),i=this.getCurrentState()?this.getCurrentState().getTarget(e):!1,n=i?this.states[i]:!1;n&&this.transitionTo(n,t.getBody());break;case utilities.statemachine.StateMachine.CANCEL:this.canceled=!0}},registerState:function(t,e){null===t||this.states[t.name]||(this.states[t.name]=t,e&&(this.initial=t,this.setCurrentState(t)))},removeState:function(t){var e=this.states[t];null!==e&&(this.states[t]=null)},transitionTo:function(t,e){if(null!==t){if(this.canceled=!1,this.getCurrentState()&&this.getCurrentState().exiting&&this.sendNotification(this.getCurrentState().exiting,e,t.name),this.canceled)return void(this.canceled=!1);if(t.entering&&this.sendNotification(t.entering,e),this.canceled)return void(this.canceled=!1);this.setCurrentState(t),t.changed&&this.sendNotification(this.getCurrentState().changed,e),this.sendNotification(utilities.statemachine.StateMachine.CHANGED,this.getCurrentState(),this.getCurrentState.name)}},getCurrentState:function(){return this.viewComponent},setCurrentState:function(t){this.viewComponent=t}},{NAME:"StateMachine",ACTION:"/notes/action",CHANGED:"/notes/changed",CANCEL:"/notes/cancel"}),puremvc.define({name:"utilities.statemachine.FSMInjector",parent:puremvc.Notifier,constructor:function(t){this.fsm=t}},{fsm:{},stateList:null,inject:function(){var t=new utilities.statemachine.StateMachine,e=this.states();t.states={},t.initial=null;for(var i=0;i<e.length;i++)t.registerState(e[i],this.isInitial(e[i].name));this.facade.registerMediator(t)},states:function(){var t=this.fsm.state;if(null===this.stateList){this.stateList=[];for(var e=0;e<t.length;e++)this.stateList.push(this.createState(t[e]))}return this.stateList},createState:function(t){var e=new utilities.statemachine.State(t["@name"],t["@entering"],t["@exiting"],t["@changed"]),i=t.transition;if(i)for(var n=0;n<i.length;n++)e.defineTrans(i[n]["@action"],i[n]["@target"]);return e},isInitial:function(t){return t===this.fsm["@initial"]}});